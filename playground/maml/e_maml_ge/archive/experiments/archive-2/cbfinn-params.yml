%YAML 1.2
---
config:
  # 8 gives better usage of i7 CPU.
  max_concurrent: 1
env:
  DISPLAY: ":1"
  PYTHONPATH: $HOME/machine_learning/meta_learning_project/packages
run: |
  {env} python run_maml.py {args}
default_args:
  # experiment parameters
  env_name: "HalfCheetahGoalVel-v0"
  start_seed: 200
  render: false
  eval_plot_interval: 1 # "interval for plotting the loss"
  eval_save_interval: 10 # "interval for saving plot figure"
  # Training Parameters
  n_tasks: 1
  n_grad_steps: 0
  n_epochs: 500
  batch_timesteps: 128
  env_max_timesteps: 0
  # model parameters
  first_order: false
  alpha: 1.0
  inner_alg: PPO
  inner_optimizer: Adam
  beta: 0.03
  meta_alg: PPO
  meta_optimizer: Adam
  # Model Options (PPO)
  vf_coef: 0.5 # idea is to use this to reduce the update on the value function
  ent_coef: 0.0
  max_grad_norm: 0.5
  clip_range: 0.2
  # GAE parameters
  gamma: 0.99
  lam: 0.95
batch_args: # use good typing convention here
    # # DEBUG parameters
    # no_state_dict: 0
    # no_task_resample: 0
    # debug_params: 0
    # run parameters
# Note: try to test multiple gradient descent on the same data.
# Note: rl_MAML has exploration tied with theta. E terms account for exploration.
  - run_mode: e_maml
    log_directory: /mnt/slab/krypton/machine_learning/maml_runs/goal-cheetah/cbfinn-parameters/{time:%Y-%m-%d}/{time:%H%M%S.%f}-e-maml/
    n_tasks: 40
    n_parallel_envs: 20  # 20
    single_sampling: 1  # sample once, gradient descent multiple times.
    n_grad_steps: 1
    eval_grad_steps:  "0 4"
    batch_timesteps: 2  # 1
    # MAML params
    alpha: 0.001  # multiple optimization epochs require smaller step-size.
    inner_alg: VPG
    inner_optimizer: SGD
    beta: 0.0001
    meta_alg: PPO
    meta_optimizer: Adam
